// let a = 3
// let b = 5
let a = 5;
let b = 3;
// let a = 3
// let b = 3

function solution(a, b) {
  var answer = 0;
  let num;
  // if (a > b){ num = a, a = b , b = num; }
  // 배열 기반의 다중할당
  if (a > b) [a, b] = [b, a];
  console.log(a, b);

  // console.log(a,b)

  for (let i = a; i <= b; i++) {
    answer += +[i];
    // console.log(answer)
  }
  return answer;
}

solution(a, b);

// ## 문제 설명
// 두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.
// 예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.

// ## 제한 조건
// - a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.
// - a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.
// - a와 b의 대소관계는 정해져있지 않습니다.

// ## 입출력 예
// a	b	return
// 3	5	12
// 3	3	3
// 5	3	12

// ## think
// - 처음 수와, 끝 수가 주어졌잖아! for문아닌가요ㅎㅎ.
// - 그냥 for문을 돌려서는 약간의 예외가 있다. a와 b의 대소관계이다. <br>
//   작은 수 ~ 큰 수 사이의 합은 일반 for문으로 해결 가능하지만, <br>
//   큰 수 ~ 작은 수 사이의 합은 약간의 생각이 필요하다. <br>
// - 나는 num의 변수를 하나 추가해 그 안에 큰a의 값을 넣어두고<br>
//   b의 값을 a에 할당한 뒤, num에 있는 값을 다시 b에 할당했다.<br>
// - a,b의 순서를 정리하고 for문으로 a부터 b까지 더한 결과값을 출력해주었다.<br>
// <br>
// <br>

// - **다시 생각해봐야 할 점.**<br>
//   아무래도 a와 b의 값을 서로 바꿔 할당하는 부분에서 시간이 많이 소요되는 것 같다 <br>
//   원시값들을 각각 다른 변수에 넣어서 값을 이동하다보니<br>
//   원시값은 변경 불가능한 값이기 때문에 새로운 메모리를 만들어 값을 할당하게 되고,
//   이는 큰 수를 계산하게 될 경우.. 더 많은 메모리를 사용하게 되지 않을까... 하는 생각을 하게 됐다.<br>
//   이번에는 나의 생각을 실현해봤지만 다음번에는 조금 더 효율성을 생각해봐야겠다<br>
// <br>
